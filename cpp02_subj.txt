Упражнение 00: Мой первый православный класс
Вы знаете целые числа, а также знаете числа с плавающей запятой. Как мило. 

Пожалуйста, прочитайте эту трехстраничную статью (1, 2, 3), чтобы узнать, что это не так. Давайте, читайте. 

До сегодняшнего дня любые числа, которые вы использовали в своих программах, были в основном целыми числами или числами с плавающей точкой,
или любыми их вариантами (short, char, long, double и т.д.). Из прочитанного вами ранее можно предположить,
что целые числа и числа с плавающей запятой имеют противоположные характеристики. 

Но сегодня все изменится. Вы откроете для себя новый удивительный тип чисел: числа с фиксированной точкой!
Всегда отсутствующие в большинстве языков скалярные типы, числа с фиксированной точкой предлагают ценный баланс между производительностью, точностью,
диапазоном и точностью, что объясняет, почему эти числа широко используются в графике, звуке или научном программировании. 

Поскольку в C++ отсутствуют числа с фиксированной точкой, сегодня вам предстоит добавить их самостоятельно.
В качестве начала я бы рекомендовал эту статью из Беркли. Если это хорошо для них, то это хорошо и для вас.
Если вы понятия не имеете, что такое Беркли, прочитайте этот раздел их страницы в Википедии.

Напишите ортодоксальный класс для представления чисел с фиксированной точкой:
- Частные члены:
◦ Целое число для хранения значения с фиксированной точкой.
◦ Статическая константа целое число для хранения количества дробных битов. Эта константа всегда будет равна литерной 8.
- Открытые члены:
◦ Конструктор по умолчанию, который инициализирует значение фиксированной точки равным 0.
◦ Деструктор.
◦ Конструктор копирования.
◦ Перегрузка оператора присваивания.
◦ Функция-член int getRawBits( void ) const; которая возвращает необработанное значение значения с фиксированной точкой.
◦ Функция-член void setRawBits( int const raw ); устанавливает необработанное значения с фиксированной точкой.

Код:
------>>>>>SCREEN
Должно получиться что-то вроде:
----->>>>>SCREEN



Упражнение 01: На пути к более полезному классу с фиксированной точкой
Хорошо, упражнение ex00 было хорошим началом, но наш класс все еще довольно бесполезен, поскольку способен представлять только значение фиксированной точки 0.0.
Добавьте в класс следующие публичные конструкторы и публичные функции-члены:
- Конструктор, принимающий в качестве параметра целое число и преобразующий его в соответствующее значение с фиксированной(8) точкой.
Значение дробных битов инициализируется, как в ex00.
- Конструктор, принимающий в качестве параметра константу с плавающей точкой и преобразующий ее в соответствующее значение с фиксированной(8) точкой.
Значение дробных бит инициализируется как в ex00.
- Функция-член float toFloat( void ) const; которая преобразует значение с фиксированной точкой в значение с плавающей точкой.
- Функция-член int toInt( void ) const; преобразует значение с фиксированной точкой в значение с плавающей точкой. 
в целочисленное значение. Вы также добавите следующую перегрузку функции в заголовочный (объявление) и исходный (определение) файлы:
- Перегрузка оператора ", который вставляет представление с плавающей точкой значения с фиксированной точкой в поток вывода параметров. 

Код: 
Должно выводиться что-то вроде:
----->>>>>SCREEN



Упражнение 02: Теперь мы говорим
Мы становимся ближе. Добавьте в свой класс следующие перегрузки операторов-членов public:
- Шесть операторов сравнения: >, <, >=, <=, == и !=.
- Четыре арифметических оператора: +, -, * и /.
- Операторы preincrement, post-increment, pre-decrement и post-decrement,
которые будут увеличивать или уменьшать значение с фиксированной точкой от наименьшего представляемого, например, 1 + > 1.
Добавьте в ваш класс следующие перегрузки публичных статических функций-членов:
- Статическая функция-член min, которая принимает ссылки на два значения с фиксированной точкой и возвращает ссылку на наименьшее значение,
и перегрузку, которая принимает ссылки на два постоянных значения с фиксированной точкой и возвращает ссылку на наименьшее постоянное значение.
- Статическая функция-член max, которая принимает ссылки на два значения с фиксированной точкой и возвращает ссылку на самое большое значение,
и перегрузка, которая принимает ссылки на два постоянных значения с фиксированной точкой и возвращает ссылку на самое большое постоянное значение.

Вы сами можете проверить каждую функцию вашего класса, но вкратце:
----->>>>>SCREEN
должен выводить что-то вроде (я удалил журналы ctors/dtor):
---->>>>>SCREEN



Упражнение 03: BSP
Теперь, когда у вас есть полностью рабочий класс фиксированной точки, было бы здорово использовать его для чего-то полезного.
Вы собираетесь написать функцию, которая показывает, находится ли точка внутри треугольника или нет. Очень полезно, не так ли?

Давайте начнем с написания ортодоксального класса Point для представления двумерной точки:
- Частные члены:
◦ A Фиксированная const x
◦ A Фиксированная const y
◦ Все остальное, что вы сочтете полезным.
- Публичные члены:
◦ Конструктор по умолчанию, который инициализирует x и y в 0.
◦ Деструктор.
◦ Конструктор копирования.
◦ Конструктор, который принимает две постоянные плавающие точки в качестве параметров и который инициализирует x и y этими значениями.
◦ Перегрузка оператора присваивания.
◦ Все остальное, что вы сочтете полезным.

Теперь напишите функцию bsp:
- Первые три параметра - это вершины нашего любимого треугольника.
- Четвертый - точка, которую мы оцениваем.
- Возвращаемое значение - True, если точка находится внутри треугольника, в противном случае возвращаемое значение должно быть False.
Это означает, что если точка является вершиной или точкой, которая находится на ребре, возвращаемое значение должно быть False.
- Таким образом, прототип функции имеет вид: bool bsp( Point const a, Point const b, Point const c, Point const point);
Не забудьте представить свой main с несколькими тестами, чтобы доказать, что ваш класс работает так, как нужно. как задумано.
