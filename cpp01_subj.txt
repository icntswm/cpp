Упражнение 00: BraiiiiiiiiiiinnnnzzzZ
Сначала создайте класс "Зомби". Зомби имеют личное имя и могут объявлять о себе следующим образом:
<name> BraiiiiiiiiiiinnnnzzzZ...

Да, announce( void ) - это функция-член. Также добавьте отладочное сообщение в деструктор, включая имя зомби.

После этого напишите функцию, которая будет создавать Зомби, давать ему имя и возвращать его для использования в другом месте вашего кода.
Прототип функции следующий:
Zombie* newZombie( std::string name );

Вам также нужно будет написать еще одну функцию, которая создаст Зомби и заставит его объявить о себе. Прототипом функции является:
void randomChump( std::string name );

Теперь собственно суть упражнения: ваши Зомби должны быть уничтожены в соответствующее время (когда они больше не нужны).
Они должны быть размещены на стеке или в куче в зависимости от их использования: иногда уместно размещать их на стеке,
в другое время куча может быть лучшим выбором.



Упражнение 01: Больше мозгов!
Используя класс Zombie, мы создадим орду зомби!

Напишите функцию, которая принимает целое число N. При вызове она выделяет N объектов Zombie. Она должна выделить все N объектов Zombie за один раз.
Затем она должна инициализировать каждого зомби, присвоив ему имя. Наконец, он должен вернуть указатель на первый зомби.
Прототип функции выглядит следующим образом:
Zombie* zombieHorde( int N, std::string name );

Выполните main, чтобы проверить, что ваша функция zombieHorde работает так, как задумано. Вы можете сделать это, вызвав announce() для каждого из зомби.
Не забудьте удалить ВСЕХ зомби, когда они вам больше не нужны.



Упражнение 02: ПРИВЕТ ЭТО МОЗГ
Составьте программу, в которой вы создадите строку, содержащую "HI THIS IS BRAIN".
Создайте stringPTR - указатель на строку; и stringREF - ссылку на строку. 

Теперь выведите на экран адрес строки в памяти. Затем отобразите адрес строки с помощью stringPTR и stringREF. 

Затем отобразите строку с помощью указателя и, наконец, отобразите ее с помощью ссылки. 

Вот и все, никаких хитростей. Цель этого упражнения - заставить вас понять, что такое ссылки.
Это не что-то совершенно новое, это просто другой синтаксис для того, что вы уже знаете: адреса. Но даже здесь есть несколько мелких-мелких деталей.



Упражнение 03: Ненужное насилие
Создайте класс Weapon, который имеет тип string и метод getType, возвращающий const ссылку на эту строку. У него также есть setType, конечно же! 

Теперь создайте два класса, HumanA и HumanB, которые оба имеют оружие, имя и функцию attack(), которая отображает: 
NAME attacks with his WEAPON_TYPE 

HumanA и HumanB почти одинаковы, есть только две маленькие-маленькие детали:
- В то время как HumanA принимает Оружие в своем конструкторе, HumanB не принимает.
- HumanB может не всегда иметь Оружие, но HumanA будет ВСЕГДА вооружен.
Сделайте так, чтобы следующий код в обоих тестовых случаях производил атаки "грубой дубиной с шипами", а затем "каким-то другим видом дубины":
---->>>>SCREEN
В каком случае уместно хранить оружие как указатель? И как ссылку?
Почему?
Вот вопросы, которые вы должны задать себе перед выполнением этого упражнения



Упражнение 04: Сед для неудачников
Создайте программу replace, которая принимает имя файла и две строки, назовем их s1 и s2, которые НЕ пусты. 

Она откроет файл и запишет его содержимое в файл FILENAME.replace, заменив каждое вхождение s1 на s2. 

Разрешены все функции-члены класса std::string, кроме replace. Используйте используйте их с умом! 

Конечно, вы будете обрабатывать ошибки как можно лучше.
Не используйте функции манипулирования файлами на языке Си потому что это будет жульничеством, а жульничество - это плохо, понятно? 

Вы сдадите несколько тестовых файлов, чтобы показать, что ваша программа работает.



Упражнение 05: Карен 2.0
Знаете ли вы Карен? Мы все знаем, нет? Если вы не знаете, вот какие комментарии делает Карен:
- Уровень "DEBUG": Сообщения этого уровня содержат обширную контекстную информацию. В основном они используются для диагностики проблем.
Пример: "I love to get extra bacon for my 7XL-double-cheese-triple-pickle-special-ketchup burger. I just love it!"
- Уровень "INFO": Эти сообщения содержат некоторую контекстную информацию, помогающую отследить выполнение в производственной среде.
Пример: "I cannot believe adding extra bacon cost more money. You don’t put enough! If you did I would not have to ask for it!".
- Уровень "WARNING": Предупреждающее сообщение указывает на потенциальную проблему в системе.
Система в состоянии справиться с проблемой самостоятельно или продолжить решение этой проблемы в любом случае.
Пример: "I think I deserve to have some extra bacon for free. I’ve been coming here for years and you just started working here last month.".
- Уровень "ERROR": Сообщение об ошибке указывает на серьезную проблему в системе. Проблема обычно не устранима и требует ручного вмешательства.
Пример: "This is unacceptable, I want to speak to the manager now.".

Мы собираемся автоматизировать Карен, она говорит всегда одно и то же.
Вы должны создать класс с именем Karen, который будет содержать следующие частные функции-члены:
- void debug( void );
- void info( void );
- void warning( void );
- void error( void );

Karen также должен иметь публичную функцию, которая вызывает частные функции в зависимости от уровня, переданного в качестве параметра.
Прототип функции следующий: 
void complain( std::string level ); 

Цель этого упражнения - использовать указатели на функции-члены.
Это не предложение, Карен должна пожаловаться без использования леса if/elseif/else, она не колеблется и не думает дважды! 

Отправьте main, чтобы проверить, что Карен часто жалуется. Ничего страшного, если вы захотите использовать жалобы, которые мы приводим в качестве примера.
http://ci-plus-plus-snachala.ru/?p=1636


Упражнение 06: Карен-фильтр
Мы собираемся реализовать систему фильтрации того, важно ли то, что говорит Карен, или нет, потому что иногда мы не хотим обращать внимание на все,
что говорит Карен. 

Вы должны написать программу karenFilter, которая будет получать в качестве параметра уровень журнала, который вы хотите прослушивать,
и отображать всю информацию, которая находится на этом уровне или выше. Например:
---->>>>SCREEN
В этом упражнении вы должны использовать и, возможно, открыть для себя оператор switch.
